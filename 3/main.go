package main

import (
	"fmt"
	"math"
	"sync"
)

func squareOfNum(num int) int {
	return int(math.Pow(float64(num), 2))
}

func sumOfSquares(in <-chan int, processFunc func(int) int, num int) int {
	// Создаем буферизированный канал для сбора результатов из горутин вычисляющих квадраты чисел.
	out := make(chan int, num)
	// создание объекта WaitGroup для синхронизации горутин.
	var wg sync.WaitGroup
	// добавление количества ожидаемого завершения горутин к объекту WaitGroup.
	wg.Add(num)
	// в цикле запускаем горутины для вычисляния квадратов чисел и записи результатов в канал.
	for i := 0; i < num; i++ {
		go func() {
			// Вызываем метод Done, который декрементирует счетчик WaitGroup,
			// с оператором defer, чтобы он вызывался даже в том случае,
			// когда горутина выдает панику,
			defer wg.Done()
			// Получаем значение из канала in.
			number := <-in
			// Вызываем функцию, в нашем случае будет вызвана функция
			// squareOfNum, и передаем результат выполнения этой функции
			// в канал out.
			out <- processFunc(number)
		}()
	}
	// горутина ожидающая завершения всех горутин
	// для вычисления квадратов чисел и закрывающая канал с результатами.
	go func() {
		// ожидание завершения всех горутин с помощью метода Wait
		// объекта WaitGroup.
		wg.Wait()
		// Закрываем канал после получения всех результатов
		close(out)
	}()

	totalSum := 0
	// Итерируемся по всему каналу с результатами вычислений квадратов чисел
	// из последовательности, и добавяем эти результаты к переменной
	// с итоговой суммой квадратов.
	for res := range out {
		totalSum += res
	}
	return totalSum
}

func main() {
	arr := []int{2, 4, 6, 8, 10}
	// Создаем буферизированный канал для пердачи чисел
	// для вычисления их квадратов.
	in := make(chan int, len(arr))
	// Передаем значения последовательности чисел в канал in.
	for _, v := range arr {
		in <- v
	}
	// Закрываем канал in.
	close(in)
	// Вызываем функцию для вычисления суммы квадратов и передаем ей, канал
	// со значениями для вычисления квадратов, функцию для вычисления квадратов
	// чисел и длину последовательности чисел, чью сумму квадратов
	// мы хотим получить.
	result := sumOfSquares(in, squareOfNum, len(arr))
	fmt.Println(result)
}
